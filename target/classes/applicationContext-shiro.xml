<?xml version="1.0" encoding="UTF-8"?>
<beans 
	xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:util="http://www.springframework.org/schema/util" 
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans  
        http://www.springframework.org/schema/beans/spring-beans-4.3.xsd 
        http://www.springframework.org/schema/util 
        http://www.springframework.org/schema/util/spring-util-4.3.xsd
        http://www.springframework.org/schema/tx
        http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
        http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-4.3.xsd
        http://www.springframework.org/schema/aop  
     	http://www.springframework.org/schema/aop/spring-aop.xsd">

<!-- web.xml中shiro的filter对应的bean -->

	<!-- 1.securityManager安全管理器 -->
	<bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		
		<!-- 1.用于用户权限的Realm -->
		<property name="realm" ref="customRealm" />
		<!-- 2.注入session管理器 -->
		<property name="sessionManager" ref="sessionManager" />
		<!-- 3.注入缓存管理器 -->
		<property name="cacheManager" ref="cacheManager"/>
		<!-- 4.记住我 -->
		<property name="rememberMeManager" ref="rememberMeManager"/>

	</bean>
	
	<!-- 2.缓存管理器 -->
	<bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
    	<property name="cacheManagerConfigFile" value="classpath:shiro-ehcache.xml"/>
    </bean>
	
	<!-- 3.配置 realm -->
	<bean id="customRealm" class="com.hngsxy.web.shiro.CustomRealm">
		<!-- MD5 以后运行了加上 -->
		
	</bean>
	
	<!-- 4.配置lifecycleBeanPostProcessor 可以自定义的来调用配置在Spirng IOC 容器中 shiro bean 的生命周期方法 -->
	<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"> </bean>
	
	<!-- 5.启用IOC容器中使用 shiro的注解 ,但必须在配置了  lifecycleBeanPostProcessor 之后才可以使用-->
	<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator"
		  depends-on="lifecycleBeanPostProcessor"	
	/>
	<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		 <property name="securityManager" ref="securityManager"/>
	</bean>
	
	
<!-- 6.Shiro 的Web过滤器 -->
	<bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager" />
		
		<!-- loginUrl认证提交地址，如果没有认证将会请求此地址进行认证，请求此地址将由formAuthenticationFilter进行表单认证 -->
		<property name="loginUrl" value="/findUserOne" />
		
		<!-- 认证成功统一跳转到/backstagepage，建议不配置，shiro认证成功自动到上一个请求路径 -->
		<property name="successUrl" value="/backstagepage"/> 
		
		<!-- 通过unauthorizedUrl指定没有权限操作时跳转页面-->
		<property name="unauthorizedUrl" value="/pages/refuse.jsp" />
		
		<!-- 自定义filter配置 -->
		<property name="filters">
			<map>
				<!-- 将自定义 的FormAuthenticationFilter注入shiroFilter中-->
				<entry key="authc" value-ref="onlogin" />
                <!--退出过滤器-->
                <entry key="logout" value-ref="systemLogoutFilter" />
			</map>
		</property>
		<!-- 过虑器链定义，从上向下顺序执行，一般将/**放在最下边 -->
		<property name="filterChainDefinitions">
			<value>
				<!-- 对静态资源设置匿名访问 -->
				/facicon.ico = anon
				/r3/** = anon
				<!-- 公开的地址 -->
				/index.html = anon
				<!-- 不拦截首页地址 -->
				/= anon
				
				<!-- 登录地址 -->
				/pages/login.jsp = anon
				
				/pages/news/new_gzgt.jsp = anon
				/pages/news/newsSpecialColumn.jsp = anon
				/pages/anon/** = anon
				<!-- 公开的URL -->
				/anon/** = anon

				/findUserOne = authc
				<!-- 请求 logout.action地址，shiro去清除session-->
				/logout = logout
				
				<!-- 配置记住我或认证通过可以访问的地址 -->
				/pages/backstagemanage/backstagepage.jsp = user
				
				<!-- 所有的url可以匿名访问  /UserManagemenController/** = anon--><!-- /** = anon -->
				
				<!-- /** = authc 所有url都必须认证通过才可以访问-->
				/** = authc
				
			</value>
		</property>
	</bean>
	
	
	<!-- shiroSessionListener  监听类-->
	<bean id="shiroSessionListener" class="com.hngsxy.web.shiro.MySessionListener"></bean>

	<!-- 凭证匹配器 -->
	<bean id="credentialsMatcher"
		class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="md5" />
		<property name="hashIterations" value="1" />
	</bean>

	<!-- Session ID UUID生成器 -->
     	<bean id="sessionIdGenerator" class="org.apache.shiro.session.mgt.eis.JavaUuidSessionIdGenerator">
	</bean>   
	<!-- Session DAO 继承自EnterpriseCacheSessionDAO  <property name="activeSessionCacheName" value="shiro-activeSessionCache"/>
	com.hngsxy.web.shiro.MySessionDao
	org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
	-->
  	<bean id="sessionDAO" class="com.hngsxy.web.shiro.MySessionDao">
		<property name="activeSessionsCacheName" value="shiro-activeSessionCache"/>
	    <property name="sessionIdGenerator" ref="sessionIdGenerator"/>
	</bean> 

	<!-- 会话管理器  com.hngsxy.web.shiro.SimpleWebSessionManager  org.apache.shiro.web.session.mgt.DefaultWebSessionManager-->
     <bean id="sessionManager" class="com.hngsxy.web.shiro.SimpleWebSessionManager">

      <!-- sessionDAO 数据库保存session信息 -->
      	<!-- <property name="sessionDAO" ref="sessionDAO"/> -->
       
<!-- 		<property name ="sessionListeners"> 
          <list> 
                <ref bean="shiroSessionListener"/>
          </list>  
	    </property> -->
       
        <!-- session的失效时长，单位毫秒 -->
         <property name="globalSessionTimeout" value="86400000"/>
        <!-- 删除所有无效的Session对象，此时的session被保存在了内存里面 -->
        <property name="deleteInvalidSessions" value="true"/>

 		<property name="sessionIdCookieEnabled" value="true"/>
        <property name="sessionIdCookie" ref="simpleCookie"/>
        
        <!-- 检测扫描信息时间间隔,单位为毫秒-->
        <property name="sessionValidationInterval" value="100000"/>
        <!-- 是否开启扫描 -->
        <property name="sessionValidationSchedulerEnabled" value="false"/>
        <!-- 去掉URL中的JSESSIONID -->
        <property name="sessionIdUrlRewritingEnabled" value="true"/>
         
    </bean> 
	
<!-- 自定义form认证过虑器 -->
<!-- 基于Form表单的身份验证过滤器，不配置将也会注册此过虑器，表单中的用户账号、密码及loginurl将采用默认值，建议配置 -->
	<bean id="onlogin" class="com.hngsxy.web.shiro.Onlogin">
		<!-- 表单中账号的input名称 -->
		<property name="usernameParam" value="username" />
		<!-- 表单中密码的input名称 -->
		<property name="passwordParam" value="password" />
		<!-- 记住我input的名称 -->
		<property name="rememberMeParam" value="rememberMe"/>
 	</bean>

<!-- rememberMeManager管理器，写cookie，取出cookie生成用户信息 -->
	<bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager">
		<property name="cipherKey" value="
			#{T(org.apache.shiro.codec.Base64).decode('4AvVhmFLUs0KTA3Kprsdag==')}"/>
		<property name="cookie" ref="rememberMeCookie"/>
		
	</bean>
	<!-- 记住我cookie -->
	<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <property name="httpOnly" value="true"/>

		<constructor-arg value="rememberMe" />
		<!-- 记住我cookie生效时间30天 -->
		<property name="maxAge" value="2592000" />
	</bean>
	
    <!-- sessionIdCookie的实现,用于重写覆盖容器默认的JSESSIONID -->
    <bean id="simpleCookie" class="org.apache.shiro.web.servlet.SimpleCookie">
        <!-- 设置Cookie名字, 默认为: JSESSIONID 问题: 与SERVLET容器名冲突, 如JETTY, TOMCAT 等默认JSESSIONID,  
                                    当跳出SHIRO SERVLET时如ERROR-PAGE容器会为JSESSIONID重新分配值导致登录会话丢失! -->  
        <property name="name" value="portal.session.id"/>
        <!-- JSESSIONID的path为/用于多个系统共享JSESSIONID -->
        <property name="path" value="/"/>
        <!-- 浏览器中通过document.cookie可以获取cookie属性，设置了HttpOnly=true,在脚本中就不能的到cookie，可以避免cookie被盗用 -->
        <property name="httpOnly" value="true"/>
        
        <property name="maxAge" value="1800"/>
    </bean>

</beans>